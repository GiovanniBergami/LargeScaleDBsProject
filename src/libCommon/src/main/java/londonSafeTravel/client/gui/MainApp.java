package londonSafeTravel.client.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import londonSafeTravel.client.net.DisruptionsRequest;
import londonSafeTravel.client.net.QueryPointRequest;
import londonSafeTravel.client.net.RoutingRequest;
import londonSafeTravel.client.net.SearchRequest;
import londonSafeTravel.schema.Location;
import londonSafeTravel.schema.document.poi.PointOfInterest;
import londonSafeTravel.schema.graph.Disruption;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.OSMTileFactoryInfo;
import org.jxmapviewer.input.CenterMapListener;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCursor;
import org.jxmapviewer.viewer.*;

import javax.swing.*;
import javax.swing.event.MouseInputListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class MainApp {
    private static final double MAX_LAT = 51.7314463;
    private static final double MIN_LAT = 51.2268448;
    private static final double MAX_LON = 0.399670;
    private static final double MIN_LON = -0.6125035;

    private JTextField textFieldSearch;
    private JButton buttonSearch;
    private JPanel rootPanel;
    private JXMapViewer mapViewer;
    private JButton buttonRefresh;
    private JCheckBox showDisruptionsCheckBox;
    private JRadioButton foot;
    private JRadioButton bicycle;
    private JRadioButton motorVehicles;
    private JPanel routingPanel;
    private JLabel routingTime;
    private JButton adminButton;
    private JTable tableTips;
    private JCheckBox disruptionsRoutingCheckBox;

    private final GlobalPainter globalPainter;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(11, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFieldSearch = new JTextField();
        textFieldSearch.setText("");
        textFieldSearch.setToolTipText("Insert here your query");
        panel1.add(textFieldSearch, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonSearch = new JButton();
        buttonSearch.setText("Search");
        panel1.add(buttonSearch, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mapViewer = new JXMapViewer();
        rootPanel.add(mapViewer, new GridConstraints(0, 0, 11, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(800, 600), null, 1, false));
        final JToolBar toolBar1 = new JToolBar();
        toolBar1.setFloatable(false);
        rootPanel.add(toolBar1, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        buttonRefresh = new JButton();
        buttonRefresh.setText("Refresh");
        toolBar1.add(buttonRefresh);
        adminButton = new JButton();
        adminButton.setText("Admin");
        toolBar1.add(adminButton);
        showDisruptionsCheckBox = new JCheckBox();
        showDisruptionsCheckBox.setText("Show disruptions");
        rootPanel.add(showDisruptionsCheckBox, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        foot = new JRadioButton();
        foot.setText("Foot");
        rootPanel.add(foot, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bicycle = new JRadioButton();
        bicycle.setText("Bicycle");
        rootPanel.add(bicycle, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        motorVehicles = new JRadioButton();
        motorVehicles.setSelected(true);
        motorVehicles.setText("Motor vehicles");
        rootPanel.add(motorVehicles, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        routingPanel = new JPanel();
        routingPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        routingPanel.setVisible(true);
        rootPanel.add(routingPanel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        routingTime = new JLabel();
        Font routingTimeFont = this.$$$getFont$$$("Arial", Font.BOLD, -1, routingTime.getFont());
        if (routingTimeFont != null) routingTime.setFont(routingTimeFont);
        routingTime.setText("");
        routingPanel.add(routingTime, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        routingPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setEnabled(true);
        rootPanel.add(scrollPane1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(175, -1), null, 0, false));
        tableTips = new JTable();
        scrollPane1.setViewportView(tableTips);
        disruptionsRoutingCheckBox = new JCheckBox();
        disruptionsRoutingCheckBox.setSelected(true);
        disruptionsRoutingCheckBox.setText("disruptions routing");
        rootPanel.add(disruptionsRoutingCheckBox, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(foot);
        buttonGroup.add(bicycle);
        buttonGroup.add(motorVehicles);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private interface DisruptionListener extends ItemListener, ActionListener {
    }

    private String serverURI;

    private String getSelectedMode() {
        String type = "";
        if (motorVehicles.isSelected())
            type = "car";
        else if (bicycle.isSelected())
            type = "bicycle";
        else if (foot.isSelected())
            type = "foot";

        return type;
    }

    public MainApp(String serverURI) throws IOException {
        this.serverURI = serverURI;

        // Create a TileFactoryInfo for OpenStreetMap
        TileFactoryInfo info = new OSMTileFactoryInfo();
        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        mapViewer.setTileFactory(tileFactory);

        POIEventHandler mouseListener = new POIEventHandler(mapViewer);

        // Create painter
        globalPainter = new GlobalPainter(mouseListener, serverURI);

        // Use 3 threads in parallel to load the tiles
        tileFactory.setThreadPoolSize(3);

        // Add interactions
        MouseInputListener mia = new PanMouseInputListener(mapViewer);
        mapViewer.addMouseListener(mia);
        mapViewer.addMouseMotionListener(mia);
        mapViewer.addMouseListener(new CenterMapListener(mapViewer));
        mapViewer.addMouseWheelListener(new ZoomMouseWheelListenerCursor(mapViewer));
        mapViewer.addKeyListener(new PanKeyListener(mapViewer));
        mapViewer.setOverlayPainter(globalPainter);
        //mapViewer.setOverlayPainter(new HeatmapPainter());

        DefaultTableModel tableData = (DefaultTableModel) tableTips.getModel();
        tableData.addColumn("Maybe you were looking for...");
        mapViewer.addMouseListener(new MouseListener() {
            londonSafeTravel.schema.graph.Point start = null;
            londonSafeTravel.schema.graph.Point end = null;

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON3)
                    return;

                System.out.println("CLICK!");

                var coordinates = mapViewer.convertPointToGeoPosition(e.getPoint());
                if (coordinates.getLatitude() > MAX_LAT || coordinates.getLatitude() < MIN_LAT ||
                    coordinates.getLongitude() > MAX_LON || coordinates.getLongitude() < MIN_LON) {
                    JOptionPane.showMessageDialog(
                            rootPanel,
                            "Point " + coordinates + " is out of bound!",
                            "Routing error",
                            JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }

                QueryPointRequest request;
                try {
                    request = new QueryPointRequest(
                            serverURI, coordinates.getLatitude(), coordinates.getLongitude(), getSelectedMode());
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }

                if (start == null)
                    start = request.getPoint();
                else {
                    end = request.getPoint();
                    System.out.println("Routing begins!");
                    System.out.println(start);
                    System.out.println(end);

                    // Create a track from the geo-positions
                    try {
                        RoutingRequest routeReq = new RoutingRequest(
                                serverURI,
                                start.getId(), end.getId(), getSelectedMode(),
                                disruptionsRoutingCheckBox.isSelected()
                        );
                        List<GeoPosition> track = routeReq.getRouteGeo();

                        System.out.println("Routing completed " + track.size() + " hops!");
                        //routingTime.setText(Double.toString(routeReq.getRoute().get(routeReq.getRoute().size() - 1).time / 60.0));
                        int seconds = (int) routeReq.getRoute().get(routeReq.getRoute().size() - 1).time;
                        int minutes = seconds / 60;
                        int hours;
                        seconds = seconds - (minutes * 60);
                        if (minutes >= 60) {
                            hours = minutes / 60;
                            minutes = minutes - hours * 60;
                            routingTime.setText(hours + " h " + minutes + " min " + seconds + " s");
                        } else {
                            routingTime.setText(minutes + " min " + seconds + " s");
                        }
                        // Set the focus
                        mapViewer.zoomToBestFit(new HashSet<>(track), 0.7);

                        globalPainter.setRoute(track);
                    } catch (Exception ex) {
                        throw new RuntimeException(ex);
                    } finally {
                        globalPainter.setRouteEnd(new DefaultWaypoint(
                                end.getLocation().getLatitude(),
                                end.getLocation().getLongitude()
                        ));

                        start = null;
                        end = null;
                    }
                    return;
                }

                if (start != null)
                    globalPainter.setRouteStart(new DefaultWaypoint(
                            start.getLocation().getLatitude(),
                            start.getLocation().getLongitude()
                    ));
                else
                    globalPainter.setRouteStart(null);

                if (end == null)
                    globalPainter.setRouteEnd(null);


                mapViewer.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        tileFactory.addTileListener(tile -> {
            //if (tileFactory.getPendingTiles() == 0) {
            //    System.out.println("All tiles loaded!");
            // }

        });
        mapViewer.setTileFactory(tileFactory);

        mapViewer.setZoom(6);
        mapViewer.setAddressLocation(new GeoPosition(51.5067, -0.1269)); // London
        mapViewer.addMouseListener(mouseListener);
        mapViewer.addMouseMotionListener(mouseListener);


        DisruptionListener disruptionManagerListener = new DisruptionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!showDisruptionsCheckBox.isSelected())
                    return;

                hide();
                show();
            }

            MouseAdapter mouseListener;

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() != ItemEvent.SELECTED)
                    hide();
                else
                    show();
            }

            private void hide() {
                mapViewer.removeMouseListener(mouseListener);
                mapViewer.removeMouseMotionListener(mouseListener);

                globalPainter.removeDisruptions();
                mapViewer.updateUI();
            }

            private void show() {
                ArrayList<Disruption> disruptions;
                try {
                    disruptions = new DisruptionsRequest(
                            serverURI).getDisruptions();
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }

                Set<DisruptionWaypoint> waypoints = disruptions
                        .stream()
                        .map(DisruptionWaypoint::new)
                        .collect(Collectors.toSet());

                globalPainter.setDisruptions(waypoints);
                mapViewer.updateUI();

                mouseListener = new MouseAdapter() {
                    private boolean isOnWaypoint(Point point, DisruptionWaypoint waypoint) {
                        var gp_pt = mapViewer.getTileFactory().geoToPixel(
                                waypoint.getPosition(), mapViewer.getZoom()
                        );

                        //convert to screen
                        Rectangle rect = mapViewer.getViewportBounds();
                        Point converted_gp_pt = new Point(
                                (int) gp_pt.getX() - rect.x - 5,
                                (int) gp_pt.getY() - rect.y - 35);

                        // hitbox
                        Rectangle hitbox = new Rectangle(converted_gp_pt, new Dimension(10, 40));

                        return hitbox.contains(point);
                    }

                    @Override
                    public void mouseClicked(MouseEvent me) {
                        for (var waypoint : waypoints) {
                            //check if near the mouse
                            if (!isOnWaypoint(me.getPoint(), waypoint))
                                continue;

                            var dialog = new DisruptionDialog(waypoint.getDisruption());
                            //@todo dimensions and default position!
                            dialog.setVisible(true);
                        }
                    }

                    @Override
                    public void mouseMoved(MouseEvent me) {
                        for (var waypoint : waypoints) {
                            if (!isOnWaypoint(me.getPoint(), waypoint))
                                continue;

                            mapViewer.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                            return;
                        }

                        mapViewer.setCursor(Cursor.getDefaultCursor());
                    }
                };

                mapViewer.addMouseListener(mouseListener);
                mapViewer.addMouseMotionListener(mouseListener);
            }
        };
        showDisruptionsCheckBox.addItemListener(disruptionManagerListener);
        buttonRefresh.addActionListener(disruptionManagerListener);

        adminButton.addActionListener(
                e -> {
                    var dialog = new AdministrationDialog(serverURI);
                    //@todo dimensions and default position!
                    dialog.setVisible(true);

                }

        );
        buttonSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String inputString = textFieldSearch.getText();
                if (!inputString.isEmpty()) {
                    System.out.println(inputString);
                    // Richiesta server
                    Location result = null;
                    List<PointOfInterest> table = null;
                    try {
                        SearchRequest req = new SearchRequest(
                                serverURI,
                                inputString
                        );
                        if (req.getList().size() == 0) {
                            JOptionPane.showMessageDialog(
                                    rootPanel,
                                    "Nothing was found!",
                                    "Query result",
                                    JOptionPane.INFORMATION_MESSAGE
                            );
                            return;
                        }

                        result = req.getCoord();
                        table = req.getList();
                    } catch (Exception ex) {
                        throw new RuntimeException(ex);
                    }
                    // in result abbiamo la location
                    // rimane da settare lo zoom su questo

                    mapViewer.setZoom(2);
                    GeoPosition puntoDaVisualizzare = new GeoPosition(result.getLatitude(), result.getLongitude());
                    mapViewer.setAddressLocation(puntoDaVisualizzare);

                    tableTips.setDefaultEditor(Object.class, null);
                    DefaultTableModel tableData = (DefaultTableModel) tableTips.getModel();

                    tableData.setRowCount(0);
                    for (var row : table) {
                        Object[] tableRow = {row.name};
                        tableData.addRow(tableRow);
                    }

                } else {
                    JOptionPane.showMessageDialog(rootPanel, "Please insert a POI or a street", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }
        });
    }

    public static void main(String[] args) throws IOException {
        JFrame frame = new JFrame("MainApp");
        frame.setContentPane(new MainApp(ConnectionDialog.askForConnection()).rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
